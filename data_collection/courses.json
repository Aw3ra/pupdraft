{
    "advanced-foundry": {
        "courses/advanced-foundry/1-erc20s/1-erc20-basics/+page.md": "---\ntitle: ERC20 Basics\n---\n\n_Follow along the course with this video._\n\n\n\n# Understanding ERC20 Tokens in Ethereum: A Comprehensive Guide\n\nWelcome back! We're about to dive deep into the fascinating world of ERC20 tokens.\n\n<img src=\"/foundry-erc20s/1-erc20-basics/erc20-basics1.PNG\" style=\"width: 100%; height: auto;\">\n\nBefore we plunge into building an ERC20 token, let's first explore what it is, and understand the concepts of EIP (Ethereum Improvement Proposals) and ERC (Ethereum Request for Comments).\n\n## What is an ERC? What is an EIP?\n\n<img src=\"/foundry-erc20s/1-erc20-basics/erc20-basics3.PNG\" style=\"width: 100%; height: auto;\">\n\nBoth Ethereum and other blockchains like Avalanche, Binance, and Polygon have mechanisms for improving their protocols, known as 'improvement proposals'. In Ethereum's ecosystem, these are called Ethereum Improvement Proposals or EIPs.\n\nDevelopers submit ideas to enhance Ethereum or other layer one protocols like Polygon, Matic or Avalanche on GitHub or other open source repositories. These improvements range from core blockchain updates to broad, best practice standards for the community to adopt.\n\n<img src=\"/foundry-erc20s/1-erc20-basics/erc20-basics5.PNG\" style=\"width: 100%; height: auto;\">\n\nIn other blockchains, these proposals and request for comments are tagged differently (for example, BEP, PEP, etc), but they contain the same types of information. Interestingly, the numbers following ERC or EIP (like in ERC20 or EIP20), are chronological and shared between the two, signifying the order in which they were introduced. For real-time updates on the process of new EIPs, check out [EIPS Ethereum.org](https://eips.ethereum.org/).\n\n## What is the ERC20 Token Standard?\n\n<img src=\"/foundry-erc20s/1-erc20-basics/erc20-basics4.png\" style=\"width: 100%; height: auto;\">\n\nAmong these EIPs and ERCs, the ERC20, or Token Standard for smart contracts, is one of the most significant. It delineates how to create tokens within smart contracts.\n\nERC20 tokens are those deployed on a blockchain using the ERC20 token standard. Essentially, it's a smart contract that represents a token - both a token and a smart contract in one. Check out the [ERC20 Token standard](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md) for a deep dive.\n\nNotable examples of ERC20 tokens include Tether, Chainlink, Uni Token, and Dai. Interestingly, while Chainlink qualifies as an ERC677, it is fully compatible with ERC20 and just offers some additional functionality.\n\n## Why Create an ERC20 Token?\n\n<img src=\"/foundry-erc20s/1-erc20-basics/erc20-basics2.PNG\" style=\"width: 100%; height: auto;\">\n\nThere are multiple applications of ERC20 tokens. They are used for governance, securing an underlying network, or creating synthetic assets, among other things.\n\n## Building an ERC20 Token\n\nHow do we go about creating an ERC20 token? Simple. By creating a smart contract that adheres to the token standard. This involves building a smart contract with certain functions, including name, symbol, decimals, etc. Also, it should be transferable and display its balance.\n\nYou can explore more advanced, ERC20 compatible tokens with improvements (such as ERC677 or ERC777), just make sure they align with your project requirements. Enjoy the process of building your ERC20 token and the new possibilities it opens up!\n",
        "courses/advanced-foundry/2-nfts/1-nfts/+page.md": "---\ntitle: NFTs\n---\n\n_Follow along the course with this video._\n\n\n\n---\n\nHello there, coding enthusiasts! As we move forward in our Solidity journey, we're inching closer towards becoming proficient, practical Solidity developers, ready to take on real-world challenges. In today's session, we're diving straight into the fascinating world of Non-Fungible Tokens (NFTs); afterward, we'll venture into the intricate web of DeFi, upgradable contracts, governance, and a glimpse into security. Excited? Let's get our hands dirty!\n\n<img src=\"/foundry-nfts/1-intro/intro1.png\" style=\"width: 100%; height: auto;\">\n\n## A Quick Overview of the Code Base\n\nLet's begin by exploring our course content. Our NFT project will entail creating dynamic NFTs of adorable dogs using VS Code. What's more, these tokens will evolve and carry fluctuating values. We aim to help you gain an in-depth understanding of NFTs, what makes them so special, and their functionality.\n\nEventually, we'll be able to add our NFTs right into our MetaMask, a thrilling outcome!\n\n## An Introduction to Two Types of NFTs\n\nTime to move onto specifics. There are two types of NFTs we will create:\n\n1. **Basic NFT:** The basic (yet super exciting!) NFT will depict a cute little pug, which will be stored in InterPlanetary File System (IPFS).\n2. **Advanced NFT:** We'll move to the advanced level by designing an NFT stored entirely on-chain, a genuinely decentralized form. An interesting attribute of this NFT is that its SVG will fluctuate depending upon the mood state we assign.\n\nOur goal is to give this NFT a dynamic personality, so to say, allowing it to mirror our mood swings. Just imagine—crafting mood-reflective tokens and importing them into an empty MetaMask!\n\n<img src=\"/foundry-nfts/1-intro/intro2.png\" style=\"width: 100%; height: auto;\">\n\n### Looking Further: Selling the NFTs\n\nApart from MetaMask, we also aim to connect with platforms like OpenSea. This move will allow us an interactive space to sell our NFTs, engage with NFT communities, and do much more.\n\nWe'll cap things off by unraveling the mysteries of API and function selector codes, giving you a well-rounded understanding of these fundamental aspects of Solidity.\n\n## Unraveling the NFT\n\nAfter understanding our course layout, let's explore what an NFT is. NFTs, or Non-Fungible Tokens, represent a unique set of data stored on Ethereum's digital ledger or blockchain. These tokens can literally represent anything — virtual real-estate, digital art, and much more! To give it a fitting analogy for our course:\n\n<img src=\"/foundry-nfts/1-intro/intro3.png\" style=\"width: 100%; height: auto;\">\n\nNow, we're surely thrilled to begin. So, strap yourself in, and let's delve into the adventurous world of NFT creation in Solidity.\n\nStay curious, and stay tuned for our next session as we build, learn, and master the art of coding!\n",
        "courses/advanced-foundry/3-defi/1-defi-introduction/+page.md": "---\ntitle: DeFi Introduction\n---\n\n_Follow along the course with this video._\n\n\n\n# Diving into Decentralized Finance (DeFi)\n\nHello and welcome back. Today we will be delving into Foundry DeFi, taking a look at the code we will be working with throughout this course. It is important to mention that DeFi is an enormous and complex subject that fully deserves an exclusive course, but for now, let's start by delving into the basics of DeFi. Let’s get started!\n\n## I. An Overview of DeFi\n\nIf you are new to DeFi, a great starting point is [DeFi Llama](https://defillama.com/), a simple and intuitive website that provides a current snapshot of the DeFi industry, giving insights into total value locked in DeFi, leading apps, and dominant protocols. Top platforms include open-source decentralized banking like Aave, liquid staking platforms like Lido, decentralized exchanges like Uniswap and Curve Finance, and collateralized debt position protocols like MakerDAO which we will be building later in the course.\n\n### The Beauty of DeFi\n\n<img src=\"/foundry-defi/1-defi-introduction/defi-introduction1.PNG\" style=\"width: 100%; height: auto;\">\n\nThe beauty of DeFi and the reason for its growing popularity is the access it provides to sophisticated financial products and instruments in a decentralized context.\n\n<img src=\"/foundry-defi/1-defi-introduction/defi-introduction2.PNG\" style=\"width: 100%; height: auto;\">\n\nIn my opinion, DeFi is possibly the most exciting and important application of smart contracts. I highly recommend spending some time to become conversant with the basics of DeFi, if not becoming fully fluent. Start with useful resources such as the [Bankless](https://www.bankless.com/) podcast and [MetaMask Learn](https://learn.metamask.io/).\n\n## II. Getting Started with DeFi\n\nI encourage you to begin by playing around with apps such as Aave and Uniswap on their respective websites.\n\nFor newcomers, it is advisable to start on testnets. Some platforms, such as Ethereum, have high transaction fees, so beginners might want to consider cheaper alternatives like Polygon Optimism or Arbitrum.\n\nIt's crucial to remain aware of the concept of MEV (Miner Extractable Value or Maximal Extractable Value) which is a significant issue in the DeFi industry. In essence, if you are a validator who arranges transactions in a block, you can organize them in a manner that favors you - cultivating fair practices in this area is the focus of several protocols like Flashbots.\n\nFor those looking to delve deeper into DeFi, I recommend checking out the [Flashbots.net](https://www.flashbots.net/) website, which houses a wealth of videos and blogs.\n\n## III. The Project: Building A Stablecoin\n\nIn this course, we will be building our version of a stablecoin. The concept of stablecoins is advanced and widely misunderstood. To simplify it, they are assets that peg their market value to another stable asset, like gold or a fiat currency.\n\n## IV. Foundry Stablecoin Project is the Most Advanced.\n\n<img src=\"/foundry-defi/1-defi-introduction/defi-introduction3.PNG\" style=\"width: 100%; height: auto;\">\n\nEven though we have following lessons on upgrades, governance, introduction to security, this Foundry Stablecoin project is the most advanced one we're working with, hands down.\n\nStepping into DeFi and understanding everything in this lesson can be a daunting task. Seek help from [Chat GPT](https://chat.openai.com/), use the [GitHub repo](https://github.com/Cyfrin/foundry-full-course-f23/) discussion tab or even browse the [MakerDAO forum](https://forum.makerdao.com/) to understand how the industry stalwarts are working and implementing DeFi.\n\nYou can even check out Coinbase's educational content to get a headstart on DeFi.\n\nAnd remember,\n\n<img src=\"/foundry-defi/1-defi-introduction/defi-introduction4.PNG\" style=\"width: 100%; height: auto;\">\n\nIn the following section, we will be walking you through the code. Happy learning!\n",
        "courses/advanced-foundry/4-upgradeable/1-upgradeable/+page.md": "---\ntitle: Upgradeable Smart Contracts & Proxies\n---\n\n_**Follow along with this video.**_\n\n\n\n---\n\nWelcome to another informative blog post on the world of smart contracts. In this lesson, we will take a closer look at upgradable smart contracts, exploring the good, the bad, and the vital information you need to use them.\n\nTo put this into perspective, upgradable smart contracts are a complex subject with potential drawbacks, which isn't the best route to default on. They sound great in theory, promising flexibility and adaptability. However, we've repeatedly seen that when there's too much centralized control over contracts, problems arise.\n\n<img src=\"/upgrades/1-intro/upgrade1.png\" style=\"width: 100%; height: auto;\">\n\nLet's dig deeper to understand the nuance of this subject and why it's important for your career as a smart contract developer.\n\n<img src=\"/upgrades/1-intro/upgrade2.png\" style=\"width: 100%; height: auto;\">\n\n## What Are the Downside of Upgradable Smart Contracts?\n\nIf you asked for real-life examples of where the potential downsides of upgradable smart contracts have manifested, it's safe to say we've got plenty. From hacks to lost funds, the risks are real.\n\nThis is where the immutable nature of smart contracts comes in - a feature that developers cherish since it implies that once a contract is deployed, nobody can modify or tamper with it. Interesting enough, the unchangeable aspect can become a pain if we want to upgrade a contract to perform new functions or squash a bug.\n\nThe exciting thing is, though the code deployed to an address is immutable, there's still room for change. In fact, smart contracts update all the time. Think token transfers or any functionality really—they frequently update their balances or variables. In other words, while the logic remains unchangeable, the contracts aren't as static as they seem.\n\n## Upgrading Your Smart Contracts: A Guided Approach\n\nSo, if upgrading smart contracts tampers with their essential immutability, how can we approach the situation more wisely? Let's look at three different patterns or philosophies we can use:\n\n1. Not really upgrading\n2. Social migration\n3. Proxy (with subcategories like metamorphic contracts, transparent upgradable proxies, and universal upgradable proxies)\n\n### Not Really Upgrading\n\nThe \"Not Really Upgrading\" method is the simplest form of \"upgrading\" a smart contract. The idea here is parameterizing everything—the logic we've deployed is there and that's what users interact with. This involves having setter functions that can change certain parameters.\n\nFor instance, if you have a set reward that distributes a token at a 1% rate every year, you can have a setter function to adjust that distribution rate. While it's easy to implement, it has limitations: unless you anticipated all possible future functionality when writing the contract, you won't be able to add it in the future.\n\nAnother question that arises is—who gets access to these functions? If a single person holds the key, it becomes a centralized smart contract, going against decentralization's core principle. To address this, you can add a governance contract to your protocol, allowing proportional control.\n\n### Social Migration\n\nIn line with maintaining the immutability of smart contracts, another method is social migration. It involves deploying a new contract and socially agreeing to consider the new contract as the 'real' one.\n\nIt has some significant advantages, the main being the adherence to the essential immutability principle of smart contracts. With no built-in upgradeability, the contract will function the same way, whether invoked now or in 50,000 years. But one major disadvantage is that you'd now have a new contract address for an already existing token. This would require every exchange listing your token to update to this new contract address.\n\nMoving the state of the first contract to the second one is also a challenging task. You need to devise a migration method to transport the storage from one contract to the other. You can learn more about the social migration method from [this blog post](https://blog.trailofbits.com/2018/09/05/contract-upgrade-anti-patterns/) written by Trail of Bits.\n\n### Proxies\n\nFinally, let's talk about proxies, the holy grail of smart contract upgrades. Proxies allow for state continuity and logical updates while maintaining the same contract address. Users may interact with contracts through proxies without ever realizing anything changed behind the scenes.\n\nThere are a ton of proxy methodologies, but three are worth discussing here: Transparent Proxies, Universal Upgradable Proxies (UPS), and the Diamond Pattern. Each has its benefits and drawbacks, but the focus is on maintaining contract functionality and decentralization.\n\n## Key Takeaways\n\nDealing with upgradable smart contracts can be complex, but understanding the pros and cons helps in making the right decision while developing smart contracts. Do remember that upgradable smart contracts might have their advantages, but they also come with their possible drawbacks, such as centralized control and increased potential for breaches. Always weigh the necessity against the risks before deciding on using upgradable smart contracts.\n\nThat was it for todays lesson. I hope you enjoyed it and learned something new. We well see you again on the next chapter so keep learning and keep building!\n",
        "courses/advanced-foundry/5-daos/1-intro/+page.md": "---\ntitle: DAOs & Governance Intro\n---\n\n_Follow along with this video._\n\n\n\n---\n\nWelcome back to yet another session in the series, today we're pacing up to lesson 14 of the topic \"Foundry DaoGovernance.\" All the code that we'll be using during the tutorial has been shared on the Github repository. So, make sure to check it out.\n\n## Closer Look at DAOs\n\nBefore we dive into how to build a DAO, it's crucial to solidify our understanding of DAOs. DAO stands for Decentralized Autonomous Organization, which can be somewhat confusing due to its broad definition. It essentially refers to any group operated by a clear set of rules embedded within a blockchain or smart contract.\n\n## How DAOs Work: An Overview\n\nIn simplest terms, imagine if all users of Google were given voting power on Google's future plans. Instead of decisions being privately made behind closed doors, the process is public, decentralized, and transparent. This innovative concept empowers users and eliminates trust issues, making DAOs a revolutionary area of exploration.\n\nLet’s dive deeper into DAOs by watching a few videos I have created in the past. After viewing these videos, we will shift focus to the practical aspect of coding a DAO.\n\n<img src=\"/daos/1-intro/dao-intro1.png\" alt=\"Dao Image\" style=\"width: 100%; height: auto;\">\n\n## Understanding DAO's Through Compound Protocol\n\nCompound protocol is a stellar example that can help us understand the intricacies of DAOs. It's a borrowing and lending application constructed with smart contracts. Navigating through the protocol, we discover a governance section that offers an interface showing all the proposals and ballots. Here, the proposals to change aspects of the protocol such as adding new tokens, adjusting APY parameters, or blocking certain coins, etc. are enlisted.\n\nThis governance process is required since the contracts used often have access controls where only their owners, in this case, the governance DAO, can call certain functions.\n\n<img src=\"/daos/1-intro/dao-intro2.png\" alt=\"Dao Image\" style=\"width: 100%; height: auto;\">\n\nA DAO do not limit its functionality to proposals and voting only. It also incorporates the feature of discussion forums where community members can deliberate on proposals, justifying their pros and cons before going ahead with the voting process.\n\n## Building a DAO: Architecture and Tools\n\nAfter understanding the basic workflow of DAO, let’s now talk about the architecture and tools that go into building DAO. First and foremost is the voting mechanism. One thing to keep in mind is to ensure that the voting mechanism is transparent and provides a fair way for participants to engage.\n\nDAO uses three main mechanisms for voting:\n\n1. ERC-20 or NFT Token as voting power: This approach is inherintly biased toward those who can afford to purchase more tokens, leading to a skewed representation of interests.\n2. Skin in The Game: Based on an article by Vitalik Buterin, he suggests that voters accountable for their choices. In this approach, people who vote for a decision that leads to negative outcomes will have their tokens taken away or reduced. Deciding which outcomes are bad is the tricky part.\n3. Proof of Personhood or Participation: This is where everyone in the community gets a single vote, regardless of how many wallets or tokens they have. This method is the most fair, but also the most difficult to implement due to the problem of civil resistance.\n\nOn chain and off chain are the two ways to implement voting in a DAO:\n\n- Onchain voting is simple to implement and transparent, but gas fees can add up quickly for large communities.\n- Offchain voting saves on gas fees and provides a more efficient way to vote, but presenting challenges in regards to centralised intermediaries.\n\n### Tools for Building a DAO\n\nThere are several no-code solutions and more tech-focused tools to help you build a DAO, including:\n\n- DAOstack\n- Aragon\n- Colony\n- DaoHouse\n- Snapshot\n- Zodiac\n- Tally\n- Gnosis safe\n- OpenZeppelin contracts\n\nBefore wrapping up, it's essential to touch briefly on the legal aspects of DAOs. DAOs are in a gray area operationally, with the state of Wyoming in the United States being the only state where a DAO can be legally recognized. Read up on the legal implications before you dive into creating your DAO!\n\nRemember, as an engineer, you have the power to build and shape the future of DAOs. So dive in and get building!\n\nStay tuned for our next sublesson, where we will guide you through the process of building a DAO from scratch. Remember to hit the like and subscribe button for more engineering-first content on smart contracts. Happy coding!\n",
        "courses/advanced-foundry/6-security/1-intro/+page.md": "---\ntitle: Security & Auditing Introduction\n---\n\n_Follow along with this video._\n\n\n\n---\n\nWelcome back! This is our final lesson in this course and we're ending on a thrilling note - diving into the world of **smart contract security and auditing**. So if you're a developer who's been eagerly monitoring your progress, then prepare to get some insightful knowledge nuggets that will truly enhance your crypto literacy.\n\nRemember, this is _just a teaser_ and won't cover everything about security, nonetheless, we're creating a treasure trove of places where you can learn and grow.\n\nAlthough this last lesson might tickle your brain, more importantly, it provides the foundational knowledge needed to take that first step into the exciting world of security in the crypto space.\n\n<img src=\"/auditing-intro/1-intro/auditing-intro1.png\" alt=\"Auditing Image\" style=\"width: 100%; height: auto;\">\n\n## Unraveling the Importance of Security with Stats\n\nIn case you're wondering why we're emphasizing security - the stats speak loud and clear! Here's a shocking fact:\n\n<img src=\"/auditing-intro/1-intro/auditing-intro2.png\" alt=\"Auditing Image\" style=\"width: 100%; height: auto;\">\n\nTo make it noir, consider the total value locked in the DEFI which was approximately $50 billion. That would indicate **6%** of all DFI was hacked last year. In simpler terms, it like placing your money in a bank that cheerfully says, \"_Hey, there's a 6% chance all your money will be gone next year_\".\n\nThe plausibility of this grim prospect closely mirrors what's happening in the crypto space and underlines the urgent need to bolster its security.\n\nTake a glance at an intriguing leaderboard on _Rectit News_. It's a daunting lineup of some of the biggest hacks, many of which were born out of code that was unaudited or reviewed by security professionals. Moreover, some of these attacks led to staggering losses of over half a billion dollars.\n\nThis brings us to a fundamental decision for protocol devs -\n\n<img src=\"/auditing-intro/1-intro/auditing-intro3.png\" alt=\"Auditing Image\" style=\"width: 100%; height: auto;\">\n\nFrom a business perspective, investing in security absolutely makes sense and provides a whopping 99% saving in costs.\n\n## Beginning the Process with Smart Contract Audits\n\nProtocol developers listen up! In all likelihood, you'll need to get a **smart contract security audit** at some point before you launch your protocol. That's where we'll start.\n\nA smart contract audit is certainly worth watching even if you don't aspire to become an auditor yourself. It will provide you with a foundation understanding when your protocol is poised to launch to mainnet.\n\nThe next video breaks down what a smart contract audit entails and how to prepare for it, so sit tight and get ready to unleash potential that’s waiting to be discovered!\n\nHappy Coding!\n"
    },
    "blockchain-basics": {
        "courses/blockchain-basics/1-basics/1-welcome/+page.md": "---\ntitle: Welcome to the course!\n---\n\n_Follow along with this video:_\n\n---\n\n_Quick tip, we will be constantly using resources from the [GitHub Repo](https://github.com/Cyfrin/foundry-full-course-f23/)_\n\n### Welcome to Cyfrin Updraft!\n\nHello and welcome! If you're interested in the world of Web3 development, then you're in the right place. This is the most cutting edge and comprehensive course ever created.\n\nLet's talk about what to expect.\n\n### Why Take This Course?\n\nWith the massive demand for Solidity and Smart Contract developers, this course is a golden opportunity to launch, advance, or switch to a career in Web3. As you navigate the course, you will learn how to work with AI tools so that you can fast-track your learning journey and become a proficient `10x` developer.\n\nDon't worry if you've never coded before, let me assure you that this course is designed for learners at all levels. If you're an experienced Smart Contract engineer or familiar with blockchain development, you're welcome to skip around and cherry-pick modules that interest you. But most importantly, this course aims to turn you into a pioneering force within Web3.\n\n### Who Am I?\n\nMy name is Patrick Collins, a seasoned Smart Contract engineer, security researcher, and dedicated advocate for Web3. I co-founded Cyfrin, a Smart Contract Security firm, I'm an average Web3 [YouTuber](https://www.youtube.com/c/patrickcollins) and the co-creator of Cyfrin Updraft.\n\nI live and breathe smart contract development.\n\nBut beyond that, I love taking passionate smart contract developers, like you, into the journey of Web3.\n\n### What to Expect\n\nThis is not your run-of-the-mill course. Instead, it's a culmination of all the knowledge we've accumulated after years of working in this industry as a Smart Contract developers and security researchers. Our track record guarantees you'll exit the other side, armed with the knowledge necessary to make a significant impact in the cryptocurrency and blockchain industry.\n\nBeyond just teaching you to code, this course prepares you to maneuver DeFi, NFTs, DAOs, Tokens, Upgradeable Smart Contracts and more. By the end, you'll have a clear path forward and a wealth of economic opportunities at your disposal – all you need is the willingness to take the steps.\n\n### Best Practices\n\n<img src=\"/blockchain-basics/git-repo.png\" style=\"width: 100%; height: auto;\" alt=\"git repo\">\n\nLet's start by covering some of the best practices to help you get the absolute most out of this course.\n\n[**Use the GitHub repo as your Bible!**](https://github.com/Cyfrin/foundry-full-course-f23/) it will have all the resources you'll need to succeed. Contained within, you'll find a `discussions` tab. Any questions you have or hurdles you face can be posted here!\n\n**Ask meaningful questions and interact with like-minded learners** – this is just as important as grasping the actual technologies.\n\n**Code along with me** - As we progress through the course, it's a good idea to code along with me. Actually _doing_ the work and performing the actions is how you'll build familiarity with these processes and how they'll really stick.\n\n**Watch for Updates** - This space moves very quickly - as things are updated, I do my best to catalogue them in [**Chronological Updates**](https://github.com/Cyfrin/foundry-full-course-f23/blob/main/chronological-updates.md) in our GitHub Repo. Reference here if it seems like something is out of date!\n\n**Move at your Pace** - Adjust the pace of the course to meet your needs. The course is modular, so if you want to skip to particular areas - absolutely do that.\n\n**Reflect on your Learnings** - repetition is the mother of skill. The more you repeat these development practices, the more they'll stick\n\n**Complete the Optional Challenges** - The GitHub Repo has links to fun challenges at the end of each lesson - these are meant to test your skills and reward you with a fun way to show of your progress as a smart contract developer!\n\n**Leverage the Community** - Blockchain development is incredibly collaborative. Get involved on [**GitHub**](https://github.com/Cyfrin/foundry-full-course-f23/discussions), [**Peeranha**](https://peeranha.io/) and other forums. Join our [**Discord**](https://discord.gg/cyfrin) server and have conversations with developers just like yourself.\n\n> **Remember:** a challenge is not a roadblock, but an opportunity to learn something new.\n\n### Let's Get Started\n\nWith the above understanding in place, get ready. We're above to embark on a journey of knowledge and opportunity.\n\nOur first step will be understanding how the blockchain even works, what smart contracts even are.\n\nLet's get Froggy 🐸\n"
    },
    "foundry": {
        "courses/foundry/1-foundry-simple-storage/1-introduction-foundry-simple-storage/+page.md": "---\ntitle: Foundry Simple Storage Introduction\n---\n\n_Follow along the course with this video._\n\n\n\n# Moving Beyond Remix: The Transition to Professional Smart Contract Development\n\nWelcome to this fascinating journey from _Remix_, a phenomenal integrated development environment (IDE), to a more advanced and professional setup. Our goal is to integrate modern toolsets that are widely adopted within the development community. Although the initial transition process might seem daunting, I promise you, it's an enriching learning curve worth experiencing!\n\n## Conquering the Transition: Being Vigilant and Resourceful\n\nWe all know that setting up your local development environment without using Remix can be a challenging task. So, I urge you to make the most of these following valuable resources for troubleshooting:\n\n- [Chat GPT](https://chat.openai.com/)\n- [Stack Exchange ETH](https://ethereum.stackexchange.com/)\n- [Web three education dev](https://web3education.dev/)\n\n<img src=\"/foundry/1-introduction-foundry/foundry1.png\" style=\"width: 100%; height: auto;\">\n\nAs we embark on this journey, remember, it's okay for things not to work at the first instance. It's absolutely fine! The trick lies in asking **specific** questions related to the errors you encounter. Install these valuable resources and do not let them be an obstacle in your developmental progression.\n\n<img src=\"/foundry/1-introduction-foundry/foundry2.png\" style=\"width: 100%; height: auto;\">\n\nWe're about to take that plunge and learn how to implement these tools in our development environment right now!\n\n## Introducing Foundry: A Professional Smart Contract Development Framework\n\nAlthough we're saying goodbye to Remix, we're switching to an even more powerful tool - [Foundry](https://github.com/foundry-rs/foundry). It's renowned within the developer's community as one of the most popular smart contract development frameworks.\n\nFoundry has numerous pros, such as:\n\n- It's known for its exceptional speed\n- It's entirely Solidity-based, eliminating the need to learn other programming languages\n- Its documentation is comprehensive.\n\nCheekily referred to as Brownie or HardHat, Foundry is an invaluable asset to smart contract developers due to its speed and efficiency.\n\nDon't forget to refer to the project's GitHub repo for additional assistance. It contains all the vital code necessary for the course in handy detail.\n\n### Foundry vs. Remix: Why the Transition?\n\nNow, you might wonder, \"Why do we need to transition to Foundry when Remix appears to be working just fine?\"\n\nAllow me to clarify that. With Remix, we performed many tasks manually, such as compiling or deploying contracts and testing the logic by repeatedly clicking through the UI. If the smart contract contains a large number of functions, the process can quickly escalate, and so can the risk of introducing errors.\n\nOn the other hand, Foundry automates these tasks, reducing the risk of errors and improving workflow efficiency. With Foundry, you can run the tests for all the functions via one single command, which is not possible with Remix due to its manual nature.\n\nFoundry also deserves special mention because it is the preferred choice of Smart Contract security engineers and auditors. I'm eager for you to experience the quick and efficient nature of this smart contract development framework.\n\n## Visual Studio Code: A Powerful Text Editor\n\nNext up, I'll introduce you to Visual Studio Code, one of the most robust code editors out there. If you're already comfortable using Visual Studio Code, feel free to skip this part.\n\n<img src=\"/foundry/1-introduction-foundry/foundry3.png\" style=\"width: 100%; height: auto;\">\n\nPlease, don't confuse this with Visual Studio, a separate application - make sure that your selected version is Visual Studio **Code**.\n\nIn case you prefer working in an environment like Atom, Sublime, or with tools like PowerShell or Terminal, feel free to do so. However, for this course, we'll stick with Visual Studio Code and you will be guided through its setup.\n\n## Installation Instructions: Find the One that Suits You\n\nLastly, we'll go through the installation processes for three different systems:\n\n- Mac and Linux\n- Windows\n- Last-ditch effort: Gitpod installation.\n\nI highly encourage getting everything running natively in your local environment. However, if all else fails, follow the Gitpod installation process.\n\nStay tuned for the next post where we commence with Mac and Linux installations.\n\nThat's all for now, folks. Are you excited to get started on this thrilling journey from Remix to Foundry? Let's forge ahead with a 'learning' and 'growing' mindset!\n",
        "courses/foundry/2-foundry-fund-me/1-fund-me-setup/+page.md": "---\ntitle: Welcome & Setup\n---\n\n_Follow along the course with this video._\n\n\n\n---\n\nWelcome to Lesson 7, where we will cover 'Foundry FundMe,' a crucial part of our smart contract journey. The aim of this lesson is to learn how to professionally deploy the code, master the art of creating fantastic tests, and gain insights into advanced debugging techniques.\n\n## Your First GitHub Contribution\n\nThis will be the first codebase that you will be contributing to GitHub yourself. Using a version control system such as GitHub, GitLab, or Radical is integral to being part of the Web Three ecosystem. For this lesson, we will be utilizing GitHub, given its popularity.\n\n## Understanding the Foundry FundMe\n\nWe start by delving into the FundMe contracts that we created previously. The source folder (`src`) contains these contracts, exhibiting the advanced syntax with all caps constants and underscores (`i_`, `s_`) fore immutables and storage/state variables, respectively.\n\nUntil now, we talked a lot about storage and state, but we didn't delve into what they really mean. Through a 'Fun with Storage' example, we will uncover these concepts in this lesson. This will form the backbone of understanding how to make contracts more gas efficient. Hence, making transactions less expensive for users.\n\n## Taking the Plunge\n\nAll right, let's jump into the code!\n\nWe will be working within our VS code, in our Foundry `F23` folder. To date, the only folder we have created is `foundry-simple-storage`. Now we will create a new one called `foundry-FundMe-f23` using the `mkdir` (make directory) command.\n\n```bash\n$ mkdir foundry-FundMe-f23\n```\n\nUsing the `ls` (list) command, we will see these two folders. Following this, we will initiate VS code in the newly created `foundry-FundMe-f23` folder.\n\n```bash\n$ code foundry-FundMe-f23\n```\n\n<img src=\"/foundry-fund-me/1-setup/setup1.png\" style=\"width: 100%; height: auto;\">\n\n\nOnce we set up our new VS code, we can initialize our blank Foundry project using the `forge init` command.\n\n```bash\n$ forge init --force\n```\n\n## Understanding the Fundamentals through Counter.sol\n\nSubsequently, we come across the counter.sol contract within the `src` (source) folder. This is a basic contract that allows us to understand the foundational principles in depth. The contract has a `setNumber` function, an input parameter, `uint256 newNumber`, which modifies the variable as per the new number.\n\nIt also includes an `increment` function employing the `++` syntax equivalent to the expression `number = number + 1`.\n\n\n\n```js\nfunction increment() public {\n    number = number + 1;\n}\n```\n\n## Deploying the Code\n\nFurther, we learn how to deploy this code using Foundry scripts and make it easier to run these contracts on different chains requiring unique addresses. We also acquire insights into how to use Foundry scripting to interact with our contracts in reproducible scripts instead of always from the command line.\n\n## Wrapping Up\n\nBy the end of this lesson, you should have a thorough understanding of this code, how to use it, discuss it effectively, and more importantly, how to write fantastic tests for your contracts. This is a crucial skill for any aspiring smart contract engineer.\n\nUpon completion, you should 100% share the project on your GitHub and social channels. Remember, this lesson is an enormous step in your Smart Contract journey.\n\nKeep learning and let's get started with the Fund Me project!",
        "courses/foundry/3-html-fund-me/1-setup/+page.md": "---\ntitle: Setup\n---\n\n_Follow along the course with this video._\n\n---\n\nLet's look at how what we've built interacts with a wallet. Remember, you can find all the code for this lesson [**here**](https://github.com/Cyfrin/html-fund-me-f23).\n\nWe won't be going over a whole full-stack application here, but the repo above contains a raw front-end you can try to replicate if you would like to challenge yourself.\n\n> Additional front-end content will be available on Updraft in the near future!\n\nOur goal will be uncovering what's happening 'under the hood', allowing you to understand exactly what's going on when you interact with a website sending a transaction to the blockchain.\n\n### Setup\n\nNormally I would walk you through the steps to get setup, but I'm not going to do that this time.\n\nNow that you've installed Git and created a GitHub in previous lessons, we're going to clone an existing repo to have something to start with rather than starting from scratch.\n\nIn our terminal use the command:\n\n```bash\ngit clone https://github.com/Cyfrin/html-fund-me-f23.git\n```\n\nNow we can open this in a new instance of VS Code with:\n\n```bash\ncode html-fund-me-f23\n```\n\nIn order to spin up a local front end, we're going to use an extension called [**Live Server**](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer). Once installed you can simply press the `Go Live` button in the bottom right.\n\n<img src=\"/html-fundme/1-setup/html-fund-me1.png\" style=\"width: 75%; height: auto;\">\n\nAnd with that you should have this simple front end open in a browser.\n\n<img src=\"/html-fundme/1-setup/html-fund-me2.png\" style=\"width: 75%; height: auto;\">\n\n<br>\nWe'll be using this to glean a deeper understanding of what exactly is happening when we're interacting with websites in the coming lessons.\n",
        "courses/foundry/4-smart-contract-lottery/1-setup/+page.md": "---\ntitle: Setup\n---\n\n_Follow along the course with this video._\n\n\n\n---\n\nWelcome back! I hope you enjoyed your break because we're about to dive into project number nine. As always, our goal is not just to teach you to build amazing projects, but to ensure you understand best practices and how to make your code look phenomenal.\n\n## Getting Started\n\nFor the project, we'll be working with an **advanced lottery or raffle smart contract**. This won't just be an exercise in coding, but a chance to learn more about:\n\n- Events\n- Working with true random numbers\n- Working with Modulo\n- Chainlink automation\n- And so much more.\n\nFeel free to explore the code base right in the course down to lesson nine. No need to follow along right now, just watch and get a feel for what we're about to build.\n\n<img src=\"/foundry-lottery/1-setup/setup1.png\" style=\"width: 100%; height: auto;\">\n\n## A Closer Look at the Smart Contract\n\nIn this project, we're introducing some **professional Nat spec for an even better looking codebase**. A key feature here is the raffle or lottery smart contract. This contract includes various functionality such as:\n\n- Enabling users to enter the raffle\n- A unique `checkUpkeep` functionality\n- A `fulfillRandomWords` function that chooses a winner and awards them a sum of money based on the entries\n- Multiple getter functions\n\nHaving made sure our foundational setup is in place with `forge build`, we then move to our make file where we have different commands like deploying our smart contracts and interacting with the Chainlink automation.\n\n## Building From Scratch\n\nOne crucial lesson we should all remember is that repetition is the mother of skill. The more you code, the better you get. As such, it advisable to code along, pausing the tutorial occasionally to try coding on your own.\n\nWe start fresh by creating a new Foundry project. Right before diving into code, it's essential to plan out what you want your project to achieve. Define those goals clearly, while making sure they align with the project's requirements. For the lottery project, the goals include:\n\n- Users should be able to enter the raffle by paying for a ticket\n- The lottery should automatically and programmatically draw a winner after a certain period\n- Chainlink VRF should generate a provably random number\n- Chainlink Automation should trigger the lottery draw regularly\n\n**Rope in Chainlink for the win!**\n\n- Chainlink VRF is an essential tool to instill trust in the lottery process. It generates a provably random number outside of the blockchain, ensuring the process is fair and transparent.- Chainlink Automation, a time-based trigger, eliminates the need for manual trigger of the lottery draw, making the process even smoother.\n\nGiven the goals, the functions necessary to achieve this are `enterRaffle` and `pickWinner`. The `enterRaffle` function allows users to buy a ticket to enter the raffle and the `pickWinner` function randomly picks a winner and awards them the accumulated entry fees.\n\n## The Layout for Your Code\n\nCode layout matters! As they say, \"Clean code is a process, not a point in time.\" We can improve our code's layout and readability with the best practices we have learned.\n\n<img src=\"/foundry-lottery/1-setup/setup2.png\" style=\"width: 100%; height: auto;\">\n\nSo let's get back to our Enter raffle function. You would probably want to set a ticket price or entry fee, right? Therefore, setting up an `entranceFee` state variable promptly at the top of the contract is recommended. We want to be mindful of our gas costs though, hence making the variable immutable.\n\n```js\nuint256 private immutable _entranceFee;\n```\n\nCreating a getter function for the entrance fee allows for transparency since the world can see the fee.\n\n```js\n// Getter functions\nfunction getEntranceFee() external view returns(uint256){\n    return _entranceFee;\n}\n```\n\nWe are just getting warmed up! There’s more to building this lottery contract. No worries, though, the journey to creating a provably fair, a provably random lottery, while learning and implementing best practices to making your code look phenomenal, is going to be amazing.\n\nLet's jump in!\n"
    },
    "security": {
        "courses/security/0-introduction/1-trailer/+page.md": "---\ntitle: Security Course Trailer\n---\n\n_Follow along with this video_\n\n\n\n---\n\n---\n\n## Ultimate Smart Contract Security, Assembly, and DeFi Curriculum\n\n### Introduction\n\n**Welcome to the ultimate Smart Contract Security, Assembly, and DeFi Curriculum.** This course is designed to provide the most advanced and comprehensive training in EVM assembly, security auditing, and DeFi (Decentralized Finance).\n\n### Course Overview\n\n- **Target Audience:** This course is tailored for individuals seeking deep insights and extensive knowledge in smart contract security, assembly language in EVM (Ethereum Virtual Machine), and decentralized finance applications.\n- **Course Structure:** The curriculum is structured to cover the intricacies of security auditing, the fundamentals and advanced concepts of EVM assembly, and critical aspects of DeFi.\n\n### Objectives\n\n1. **Deep Understanding of Smart Contract Security:** Gain an in-depth knowledge of the security aspects vital for smart contracts in the blockchain ecosystem.\n2. **Proficiency in EVM Assembly:** Develop a solid understanding and hands-on experience with EVM assembly language, crucial for advanced blockchain development.\n3. **Mastery of DeFi Concepts:** Explore and master the concepts and applications of decentralized finance, an emerging and significant sector in the blockchain world.\n\n### Expectations\n\n- **Commitment and Readiness:** The course demands a high level of commitment and is intended for individuals who are ready to dive deep into the complex world of blockchain technology.\n- **Advanced Level:** This is not an introductory course. It is expected that participants already have a foundational understanding of blockchain and programming concepts.\n\n---\n\n**Are you ready to embark on this journey and expand your knowledge in smart contract security, EVM assembly, and DeFi?** Let's get started! 🚀\n\n---\n",
        "courses/security/1-review/1-tooling-requisites/+page.md": "---\ntitle: Tooling Pre-requisites\n---\n\n_Follow along with this video_\n\n---\n\n## Pre-requisite Tools\n\nBefore we get deep into coding, there are some useful tools we're going to be using throughout the course. Best to prepare them now.\n\nFirstly, you will need some kind of IDE or text editor. I like to use [**Visual Studio Code**](https://code.visualstudio.com/). For those of you more security and privacy focused you may want to check out [**VSCodium**](https://vscodium.com/) which removes a lot of the Microsoft _stuff_.\n\n## Frameworks\n\nThe primary framework we'll be working with in this course is Foundry. You can view installation instructions for that [**here**](https://book.getfoundry.sh/getting-started/installation).\n\nBut hey, if you’re more familiar with [**Hardhat**](https://hardhat.org/), [**Brownie**](https://eth-brownie.readthedocs.io/en/stable/), or any other framework, don't stress; you can absolutely follow along using your tools. We'll be tackling some Foundry-specific tasks, but you're always welcome to adapt them for your framework of choice.\n\n> Remember: You can use commands `foundryup` to update your Foundry tools and `forge --help` to access a help guide.\n\nAdditional Foundry specific features we'll be using include `cast` and `chisel`, both of which we'll learn more about in this course.\n\n## Coding Environment\n\nIf you're using a PC with Windows, ensure you're using **Windows with WSL**.\n\nThis tool ensures the Linux terminal commands we run are compatible with your machine too. There's a brilliant [**guide by Vasiliy**](https://youtu.be/umepbfKp5rI?feature=shared&t=23546) walking you through the WSL installation process if you need it.\n\nFor Linux and Mac users, you can simply stick with the environments you're already using.\n\nAI tools like [**Phind**](https://www.phind.com/) or [**ChatGPT**](https://www.chat.openai.com) aid in seeking answers when things get tough. One nifty feature **Phind** offers is web searching; you can query \"_install Foundry for the ETH ecosystem_\", and the tool will surf the web, compile an answer, and offer you a digestible solution for your query!\n\n<img src=\"/security-section-1/1-tooling/tooling1.PNG\" style=\"width: 100%; height: auto;\" alt=\"block fee\">\n\n## Web3 Is About Community\n\nI highly recommend you consider creating accounts on platforms like:\n\n- [**Peeranha.io**](https://peeranha.io/) - A great platform for discussion and QA for Web3\n- [**Ethereum Stack Exchange**](https://ethereum.stackexchange.com/) - One of _the_ best blockchain developer resources available\n  and of course\n- [**GitHub**](https://www.github.com) - Every developer needs an account here. It's objectively the best space online to collaborate, discuss and share coding support.\n\nRemember to jump in and ask questions. Don't pretend to have answers when you don't. The learning experience is about being humble and is most rewarding to those willing to ask questions and seek clarity. Embrace the \"I don't know, and I will find out\" attitude.\n\n> One of the worst things you can do as a security researcher is pretend to know something you don't.\n",
        "courses/security/2-audit/1-what-is-an-audit/+page.md": "---\ntitle: What is a Smart Contract Audit?\n---\n\n_Follow along with this video:_\n\n##\n\n---\n\nYou might think you've got a grip on what a smart contract audit is all about, but this lesson aims to help you dive deeper and truly comprehend the whole process. Brace yourself, as today we are stepping into the interesting realm of security reviews.\n\nLet's start off by stating that the term \"smart contract audit\" is a bit of a misnomer. As a more appropriate alternative, I am a stout advocate of \"security review.\" I even have a T-shirt to prove my allegiance!\n\nYou might be wondering why this change of terms is required. Well, it’s because the term 'audit' might wrongly insinuate some kind of guarantee or even encompass legal implications. A security review, being free of these misconceptions, exudes the essence of what we are actually doing: looking for as many bugs as possible to ensure maximum code security.\n\n> Note: Despite this, many protocols still insist on requesting a \"smart contract audit,\" so it's eminent to know that the terms are interchangeable. When you hear \"security review\", think \"smart contract audit\" and vice versa. Protocols are often unaware of these nuances, but you, as a trained security researcher, know better!\n\nBy now, I hope you're questioning with anticipation: \"What does a security review entail?\"\n\n## The Three Phases of a Security Review\n\nRight in our GitHub repository, we detail the three phases of a security review and what that process looks like.\n\n    1. Initial Review\n            a. Scoping\n            b. Reconnaissance\n            c. Vulnerability identification\n            d. Reporting\n    2. Protocol fixes\n            a. Fixes issues\n            b. Retests and adds tests\n    3. Mitigation Review\n            a. Reconnaissance\n            b. Vulnerability identification\n            C. Reporting\n\nTo give you a heads-up, there really isn't a \"one-size-fits-all\" approach to smart contract auditing. There are several unique strategies, each bringing a different set of pros and cons to the table.\n\nIn this course we'll discuss two particularly effective techniques, `\"the Tincho\"` and `\"the Hans\"`, to help familiarize you with the process. However, remember that these are just examples; there isn’t a definitive, \"correct\" way of performing a security review.\n\nBefore we delve into the specifics, let's discuss why security reviews are critical.\n\n## Importance of Security Reviews\n\n> A smart contract audit is a timeboxed, security based review of your smart contract system. An auditor's goal is to find as many vulnerabilities as possible and educate the protocol on ways to improve their codebase security and coding best-practices moving forward.\n\nAs code deployed to a blockchain is immutable, it’s crucial that it's error-free before deployment. The permissionless and adversarial nature of the blockchain means that protocols need to be ready to repel malicious users. Failure to do so can lead to hefty monetary losses, as evidenced by the nearly $4 billion stolen due to smart contract vulnerabilities last year.\n\nThe benefits of conducting a security review go beyond just minimizing vulnerabilities.\n\nIt also aids protocol developers in enhancing their understanding of the code itself, thereby accelerating feature implementation and increasing effectiveness. A security review can also familiarize your team with the latest trends and tooling in the space.\n\nOften a single audit won't be enough, protocols are really entering into a security journey which may include:\n\n- Formal Verification\n- Competitive Audits\n- Mitigation Reviews\n- Bug Bounty Programs\n\nWith this understanding, let's familiarize ourselves with the process of a typical audit.\n\n### Reach Out for a Review\n\nThe review process begins when a protocol reaches out, be it before or after their code is complete. After they make contact, it's important to determine the cost of a review based on things like:\n\n- Code Complexity/nSLOC\n- Scope\n- Duration\n- Timeline\n\nLines of Code: Duration\n\n- 100 : 2.5days\n- 500 : 1 Week\n- 1000 : 1-2 Weeks\n- 2500 : 2-3 Weeks\n- 5000 : 3-5 Weeks\n- 5000+: 5+ weeks\n\nTake this with a lot of salt though, as these timelines vary largely based on circumstance.\n\nWith the submission of a `commit hash` and `down payment` by the protocol and start date can be set!\n\n> Note: The `commit hash` is the unique ID of the codebase an auditor will be working with.\n\n### Audit Begins\n\nNow that the admin work is done, auditors can roll up their sleeves and get to work. Using everything in their arsenal, they will strive to find as many vulnerabilities as possible in your code.\n\n### Initial Report\n\nOnce the review period is over, the auditors compile an initial report. This report includes all findings, categorized according to severity\n\n- High\n- Medium\n- Low\n- Information/Non-critical\n- Gas Efficiencies\n\nHigh, medium and low findings have their severity determined by the impact and likelihood of an exploit.\n\nInformational/Non-Critical and Gas are findings focused on improving the efficiency of your code, code structure and best practices. These aren't vulnerabilities, but ways to improve your code.\n\n### Mitigation Phase\n\nThe protocol's team then has a fixed period to address the vulnerabilities found in the initial audit report. More often than not, they can simply implement the recommendations provided by the auditors.\n\n### Final Report\n\nUpon completion of the mitigation phase, the audit team compiles a final audit report focusing exclusively on the fixes made to address the initial report's issues. Hopefully, this cements a strong relationship between the protocol and the audit team, fostering future collaborations to keep Web3 secure.\n\n## Ensuring a Successful Audit\n\nFor an audit to be as successful as possible, you should ensure that there's:\n\n- Good documentation\n- A solid test suite\n- Clear and readable code\n- Modern best practices are followed\n- Clear communication channels\n- An initial video walkthrough of the code\n\nBy considering auditors as an extension of your team, maintaining an open channel of communication, and providing them with the necessary documentation and context, you ensure the audit process is smoother and more accurate, providing auditors valuable context of the codebase.\n\n## Post Audit\n\nLastly, remember that a smart contract audit is an integral part of a security journey rather than an endpoint. Even after an audit, any subsequent code changes need to be reviewed as the new code is unaudited, regardless of the size of the change.\n\n> Remember: One audit might not be enough. Getting more eyes on your code is only going to increase the chances of catching vulnerabilities before it's too late\n\n## What an audit _isn't_\n\nGoing through a security review does not mean that your code is bug free. Security is a continuous process tha tis always evolving.\n\n## In Closing\n\nThis should have provided you a high-level understanding of what a security review is, what it's comprised of and what to expect while performing one.\n\nWe'll detail some of the specific differences between `competitive` and `private` audits in a later section.\n\n> \"There is no silver bullet in smart contract auditing. But understanding the process, methods, and importance of regular security reviews can significantly enhance your protocol's robustness.\"\n",
        "courses/security/3-first-audit/1-first-review/+page.md": "---\ntitle: Your First Security Review\n---\n\n_Follow along with this video:_\n\n---\n\nWelcome everyone! I hope you're well-rested, rehydrated, and ready to dive into the nitty-gritty of how smart contract audits work. We've had a good start with a high-level overview of what a smart contract audit or a security review contains. Now, we're going to go a level further by conducting not one, but a handful of audits over the next 6 sections.\n\nThis is an exciting journey to improve our understanding of audits. We'll strengthen our knowledge and learn from some of the best people in the world such as Hans, the number one competitive auditor in the world for the first half of 2023. Now let’s kick things off with the Password Store audit.\n\n### The PasswordStore Audit: A Closer Look\n\nFor out first audit we're immersing ourselves into a scenario where we're auditing the PasswordStore protocol, just like you could if you were working for a firm like Cyfrin. It's a very immersive and experiential way of learning as we'll be adopting the role of a security researcher who has just received an audit request from a protocol.\n\nIn later lessons we'll also go through the process of submission findings in a competive scenario like `CodeHawks`\n\n<img src=\"/security-section-3/1-review/firstaudit1.png\" style=\"width: 100%; height: auto;\">\n\n### The End Goal\n\nBefore jumping into this process ourselves, I'd like us to look at what we're striving towards. Below you can find links to the PasswordStore repo at various phases of an audit.\n\n- [**Security Review CodeV1**](https://sepolia.etherscan.io/address/0x2ecf6ad327776bf966893c96efb24c9747f6694b)\n- [**Security Review CodeV2**](https://github.com/Cyfrin/3-passwordstore-audit)\n- [**Security Review CodeV3**](https://github.com/Cyfrin/3-passwordstore-audit/tree/onboarded)\n- [**Security Review Final**](https://github.com/Cyfrin/3-passwordstore-audit/tree/audit-data)\n\nTake a look specifically at `Security Review Final`. The `audit-data` folder contains all the things you'll be able to build by the end of this section, including a professional PDF audit report.\n\n### Remember the Phases\n\nIt’s important to remember the phases for each audit or security review. They include:\n\n1. Initial Review\n   - Scoping\n   - Reconnaissance\n   - Vulnerability Detection\n   - Reporting\n2. Protocol Fixes\n   - Fixes issues\n   - retests and adds tests\n3. Mitigation Review\n   - Reconnaissance\n   - Vulnerability Detection\n   - Reporting\n\nIn this course, our main focus will primarily be on how to perform your initial review.\n\nWe're starting out small with a codebase of less than 20 lines, but this is just the beginning. It's important to remember that _you_ are the security researcher and often times what may be clear or obvious to you, isn't to a protocol. Your expertise is valuable.\n\nSo, with the expectations set and our targets defined, let's move ahead and commence our very first smart contract audit or security review. We'll start off with a scenario that will help us better understand what our roles as auditors will look like.\n",
        "courses/security/4-puppy-raffle/1-introduction/+page.md": "---\ntitle: Introduction\n---\n\n_Follow along with this video:_\n\n---\n\n## Puppy Raffle Audit\n\nWelcome to Section 4: Puppy Raffle Audit! In addition to strengthening our skills in manual review, in this section we'll be introducing powerful tools and leveraging `static analysis` to help us secure this protocol.\n\nWe'll see the differences between a private audit report and a competitive audit submission and be introduced to the process of competing in a CodeHawks First Flight!\n\n### CodeHawks First Flights\n\nCodeHawks First Flights offer an excellent platform for budding smart contract security researchers. This platform contains relatively easy-to-understand codebases that resemble those you will find in this course.\n\nIf you are a beginner, they are a perfect opportunity to get live auditing experience and build upon the things you've learnt in a practical setting. For experienced auditors, they serve as a chance to engage in the community and itterate on your established skills.\n\n<img src=\"/security-section-4/1-introduction/introduction1.png\" style=\"width: 100%; height: auto;\">\n\nWe'll be going over how to submit an awesome competitive finding in this section.\n\n### Tooling\n\nAs mentioned above, we'll be using new tools to help us in finding vulnerabilities and familiarizing ourselves with `static analysis`. We'll be using:\n\n- [**Slither**](https://github.com/crytic/slither) - A pythonic static analysis tool compatible with Solidity and Vyper\n- [**Aderyn**](https://github.com/Cyfrin/aderyn) - Built in Rust by _Alex Roan_, Aderyn traverses Abstract Syntax Trees to highlight suspected vulnerabilities.\n\nThrough this section, you will:\n\n- Familiarize yourself with your first set of tooling.\n- Understand what static analysis is and its role in enhancing protocol security.\n- Gain an insight into the different exploits in this codebase.\n- Finally, learn how to write reports of competitive audits and differentiate them from private audits.\n\n### So Many Bugs\n\nOur previous codebase was quite small, Puppy Raffle has more to it and as a result, there are many more bugs to find! There are at least FOUR HIGHs to find in this repo (and likely some I didn't even account for 😋).\n\n### Case Studies\n\nAs we uncover vulnerabilities in the Puppy Raffle codebase, we'll dive into real world case studies detailing times these vulnerabilities were exploited in the wild.\n\nThis should give you real insight into what's at stake as we're performing security reviews and really instill that these efforts of ours matter.\n\n### Exercises\n\nAt the end of the section we'll have _even more_ excercises for you to expand on your knowledge and challenge yourself beyond the course's teachings. These are your opportunities to branch out, network and gain additional experience.\n\nThis includes participating in a CodeHawks First Flight or a competitive audit! Get ready!\n\n### Prep for Puppy Raffle\n\nIf you take a look at the [**repo**](https://github.com/Cyfrin/4-puppy-raffle-audit) associated with this section, you'll see a fairly robust README already supplied. For this review, we're assuming the protocol has already undergone some degreee of onboarding and they've provided us a respectable repo.\n\nI will transparently point out that, much like our previous protocol review, this repo has multiple branches, one of which is the `audit-data` branch. I **STRONGLY** encourage you to resist peeking in this branch until the end. The `audit-data` branch effectively serves as an `answer key`, in which all the vulnerabilities and write-ups can be found.\n\nGoing through the codebase throughout the course, and appreciating each step is how you're going to build these skills. Uncovering the attack vectors is how you build familiarity with these risks. Skipping over steps is only going to harm your progress. Build the habits, do the work.\n",
        "courses/security/5-tswap/1-introduction/+page.md": "---\ntitle: Introduction\n---\n\n_Follow along with this video:_\n\n\n\n---\n\n# Unveiling Invariance and DeFi in Security Auditing: An Interactive Exploration\n\nHappy to have you back in the exciting world of Security and Auditing. So, you’ve made it through the delightful puppy raffle, you have ideally signed up for Codeox and might have sprung into your first few flights or even explored a contest. That's awesome! You'd certainly be exuding more confidence about your security and auditing journey. But there's a lot more to unfold and absorb.\n\n## Entering Section Five: Invariance and Introduction to DFI T-SWAP Audit\n\nIn our detailed Git repo related to this course, when you scroll down, Section Five, Invariance and Introduction to DFI TSWAP Audit, will catch your attention. Making your journey a slight bit more interesting this time, we are moving onto another walkthrough security review. This time around, we will approach the task differently.\n\n![](https://cdn.videotap.com/y4z5tLc5N9gtADQGQSGP-43.5.png)\n\n## A Glimpse of What’s to Come\n\nDo not rush into the contracts yet, there’s plenty to learn before that! We will cover a lot in this section, a prime focus will be on 'Invariance'. Though we've touched upon invariants in the Foundry Course, we never really delved into their significance, and when it comes to security, that's when you realize how crucial they are.\n\nAs a budding security researcher, it’s critical to understand and appreciate the weight that invariance carries. You'll learn to identify bugs without even looking at the code in-depth. Of course, this shouldn't be your only strategy in a security review, but through this session, we're demonstrating how critical and potent it can be.\n\nWe will be wielding an array of powerful tools, such as stateful fuzzing and fuzzing invariance. If you’re unfamiliar with freepy, don't worry, we will explore that as well.\n\n![](https://cdn.videotap.com/vxJBy007OWXoaJWFjk6V-97.88.png)\n\n## Dive Deeper into DeFi\n\nDeFi experienced a surge in popularity recently. For those unfamiliar, DeFi, or decentralized finance, refers to financial services that are available on a public decentralized blockchain network. It eliminates the need for intermediaries and allows for a more open financial system.\n\nDespite the intricacy, DeFi is relatively straightforward to grasp. With patience and perseverance, you will understand it. It's a concept that can seem daunting initially due to the complex terms used. In reality, most of the concepts are based on basic math.\n\nWe will dissect the Uniswap Protocol or the T swap protocol, a Decentralized Exchange in DeFi, and demystify it for better understanding. As we dive into the security review, we will use a myriad of robust tools to hack into the system.\n\n> \"A little progress each day adds up to big results.\"\n\nThis quote embodies the essence of our entire journey here. By the end of this section, you will have practically audited an entire Uniswap V1 in the audit data folder.\n\n![](https://cdn.videotap.com/v1Dx6md72HKpatpU5PgM-195.75.png)\n\n## A Bag Full of Exploits and Tooling\n\nAfter diving under the hood of DeFi, we're going to learn a slew of new hacking techniques and tools. These include exploring esteemed toolkits like Echidna Foundry, examining concepts like consensus mutation testing and differential testing, and studying properties and exploits such as Weird ERC-20s callbacks, rebates, reentries, and core invariant breakings.\n\nThe prime focus for this session will be on understanding DFI and Invariance. Roughly going to the end of this section, you will have the experience of practically auditing the first-ever Uniswap created (Uniswap V1), commodities with a few of the bugs that I stumbled into during my journey.\n\n## Get Set Go!\n\nWith everything I've shared with you, brace yourself for a thrilling juncture in Security and Auditing. Let's put on our thinking caps, get our VS code and popcorn ready, and dive right into T Swap. Together, we will crack the code and delve deeper into the world of DeFi.\n",
        "courses/security/6-thunder-loan/1-introduction/+page.md": "---\ntitle: Introduction\n---\n\n\n\n---\n\n# Deep Dive into Security Testing with the Thunder Loan Audit\n\nWelcome back to your favorite security course repository! I trust you've spent some time on that fuzzing exercise because this lesson is going to be a _real deep dive_ into security testing. We've already learned tons of tools and skills, and now it's time to really apply and hone those skills as we dig into _Section Six: Thunder Loan Audit._\n\n## The Context: Thunder Loan Protocol\n\nLet's begin by git-cloning this lesson's code fro Github.\n\n![](https://cdn.videotap.com/iLoskdCcOE28WEUkiXTF-68.76.png)\n\nThis richly detailed protocol we'll be auditing has a fantastic logo - a frog with a thunder bolt on its chest standing over a pile of money. However, beneath this cool exterior, there lies a multitude of bugs waiting to be smoked out. This protocol also gives us a detailed experience of two of the most important DeFi protocols in the world, _Aave and Compound_, as it's majorly based on these.\n\n## DeFi, Borrowing, and Lending\n\nThese protocols are the crux of DeFi borrowing and lending, a fundamental financial concept in the DeFi universe. Whilst auditing the Thunder Loan protocol, we'll naturally delve a bit into understanding Aave and Compound.\n\n## Pricing Information and Oracles\n\nWe had a touch on this in the Puppy Raffle exercise. However, here we delve deep into the significance of sourcing accurate pricing information for assets and how to ace this process effectively as we interact with Oracles.\n\n> \"A lot of people use \\[upgradable contracts\\]. We need to know how to keep them secure.\"\n\n## Upgradable Contracts\n\nFor the first time, we'll be interfacing with an upgradable contract, a common feature in the wild world of Web 3. Now, whether or not these contracts are optimum is up for debate, but their usage is indeed undeniable.\n\n## Multifaceted Proxies\n\nWe are not going to be delving deep into the multifaceted proxy, also known as _the diamond standard_, but we're definitely going to talk a bit about its functionalities and distinctive features.\n\n![](https://cdn.videotap.com/bnzGy4zQOk9RwQjEXVOh-189.08.png)\n\nMoreover, we'll be learning about another brilliant tool called the **Upgrade Hub**. This tool comes in handy for discerning which contracts have been upgraded and which upgrades might be construed as rug pulls. By inserting a contract address, you'll be able to view its complete upgrade history, appearing similarly to git diffs.\n\n> \"Upgrades are highly sensitive in the Web 3 world. This \\[Upgrade Hub\\] is a great place to learn about and work with proxies and view their history.\"\n\n## Centralization and Defi Security Audits\n\nOur previous interactions with the T-SWAP or Uniswap audit only scratched the surface, introducing us to DEXes, invariants, and important DeFi protocols. With Thunder Loan, we’re moving to a new level.\n\nThis protocol’s code base has many common DeFi bugs, which make this one of the most important audits you can learn from. In addition to these security flaws, it introduces the concept of flash loans—a \"monster\" tool with an enormous amount of information to explore.\n\nBy the time you've audited this code base, which consists of multiple folders and contracts and guides you through a more advanced protocol, you'll significantly enhance your understanding of DeFi security audits.\n\n## Price Oracle Manipulations\n\nAccording to the curriculum, price oracle manipulation was the principal attack for the first half of 2023. So as we audit the Thunder Loan protocol, we'll be learning how to tackle this risk head-on.\n\n> \"This course provides an extensive and comprehensive walk-through of the protocol that’s packed with so many common DeFi bugs that you will learn plenty along the way.”\n\nTo wrap it up, the full report and notes on how to generate the audit report are waiting in the Thunder Loan git repo’s `audit-data` branch as usual. Brace yourself and get ready to unearth a treasure trove of bugs and become a better security tester while we audit the Thunder Loan protocol!\n",
        "courses/security/7-bridges/1-part-intro/+page.md": "---\ntitle: Introduction\n---\n\n\n\n---\n\n# Unveiling Section Seven of Security and Auditing EVM DeFi: A Comprehensive Security Review\n\nWelcome back, enthusiastic coders! Brace yourselves for an exciting deep dive into Section Seven of the Security and Auditing EVM DeFi. In this intriguing space, we are going to roll up our sleeves and immerse in not less than five detailed security reviews or audits. Stay tuned for more in part two as well.\n\n## Flashback to Thunder Loan\n\nWe have recently waved goodbye to the thrilling Thunder loan security review and audit, an eye-opener in the world of Decentralized Finance (DeFi). The concept explored here, ranging from flash loans to Oracle manipulation encapsulates the primary attacks presently haunting DeFi.\n\n![](https://cdn.videotap.com/j6Dr40RzmumPq9jhPJY3-36.13.png)\n\n### New Concepts Unfolded\n\nOur journey shed light on a multitude of aspects essential for better understanding the DeFi landscape, including price Oracle manipulation, reward manipulation, insufficient function access control, and a gamut of logic errors, function parameter validation, misconfigurations and reentrancies.\n\nWhile these are considerable advancements, we are yet to uncover every crevice of the DeFi sphere. More obscure areas, such as governance attacks and stolen private keys, are yet to be traversed. Fortunately, we will unveil these mysteries and delve deeper into the riveting world of DeFi security in this seventh chapter.\n\n## Sneak Peek into Section Seven\n\nPrimarily, we will scrutinize the Seven Boss Bridge audit code base, currently available for the first flight on the [CodeHawks platform](https://www.codehawks.com).\n\n![](https://cdn.videotap.com/LLXHIyWzga7BHJru6Wjv-90.31.png)\n\n### The Power of CodeHawks\n\nRemember, reading and evaluating security reviews is an effective way to level-up your skills. If tech-upscaling piques your interest, Code Hawks curates a vast array of first flights that are worth exploring. Furthermore, signing up for CodeOx posts and participating in competitive audits can be quite advantageous.\n\n### Repo Overview and Tooling Upgrades\n\nExploring this chapter's repo, we will first notice two conventional branches: `main` and `audit data`, where `audit data` hosts the answer keys (no peeking!).\n\nWe will explore varying Ethereum Virtual Machine (EVM) chains such as Arbitrum, Optimism, ZKSync, and Ethereum. We will ponder whether these are analogous or have unique features that set them apart.\n\nFurthermore, we will explore tools, Tenderly and Solidit, which will aid us in streamlining our code review process.\n\n### The Hans Checklist: A Systematic Approach to Coding Reviews\n\nNext, we delve into a novel system for conducting smart contract security reviews: the Hans Checklist.\n\nTowards the end of this section, we'll break down Hans' trend-setting checklist methodology, which helped him ascend to the rank of top competitive auditor globally for the first half of 2023.\n\n## The Classic Security Review Steps and Exciting Case Studies\n\nAs before, we will follow the classical method for security reviews, incorporating scoping, reconnaissance, vulnerability identification, writeups, and reporting. We will also look at the intriguing case studies based on various chains, including Polygon, ZK Sync, and how different chains actually work with different opcodes.\n\nIn this part, we will focus more on bridge hacks as these were rampant in the year 2022. Most bridge hacks we noticed unfortunately happened due to centralized controls and the loss of private keys, leading to bizarre exploitations.\n\nWe will also study several exciting exercises that include researching some attacks and doing write-ups on them. Some significant aspects would be Signature Replay, merkel tree, signature issues, polygon double spend, and nomad bridge hack.\n\n## Onwards with the Contract Scoping Phase\n\nFinally, after discussing the technicalities, we will commence with the scoping phase of the contract that will be considerably quicker this time. Following the scoping, we will move on to the actual security review of the contract.\n\nRemember, there are conceivably more issues than we cover. Thus, if you stumble across some extra issues, don't hesitate to share your insights!\n\nBrace yourselves—with all that we have in store, we're sure to add significant value to your coding and auditing skills, inspiring you to dive deeper into the mesmerizing world of coding.\n",
        "courses/security/8-mev-and-governance/1-introduction/+page.md": "---\ntitle: Introduction\n---\n\n_Follow along with this video:_\n\n<!-- TODO -->\n\n\n---\n\n# The Power of Repetition in Cybersecurity Research\n\nHello and welcome back! I certainly hope you've been embarking on the tasks and exercises that we've been laying out because their impact on your skillset cannot be overstated. As we reminded you at the beginning and will reiterate now, *repetition is the mother of skill*. The more time and effort you spend refining your abilities through practical application, the better you will get.\n\n## The Importance of Exercises\n\nDelving into these exercises is not simply a suggestion — it's an indispensable step towards heightening your aptitude. They serve as the stepping stones that pave the path to your mastery. So, prioritize these exercises and practice regularly. Their rewards are directly proportionate to the effort you invest.\n\n> \"*The more you do this, the better you will get. Doing these exercises is really important and really going to level you up.*\"\n\nAbundant in the nature of our work as cybersecurity researchers, or, as we like to say, security \"research-ers\", is the onus of extensive research.\n\n## Learning: A Continuous Journey\n\nAs we strive to fortify Web 3.0 and make the Internet safer, truly grasping that learning is not a destination but a continuous journey becomes a fundamental realization. In this pursuit of knowledge and endless learning, honing the skill of learning how to learn is paramount.\n\n> \"In this quest to keep web3 safer, you will be continuously learning. You will always be on the path for learning. So learning how to learn is going to be a great skill for you.\"\n\nEveryone has a unique learning style — what works for one person may not work for another. Therefore, it’s imperative to identify which process best suits your style of learning. Be it visual learning through infographics and diagrams, auditory learning through podcasts and audio lectures, or kinesthetic learning through hands-on, practical tasks, understanding and adapting to your preferred style can significantly contribute to your learning efficiency.\n\nObserve, adapt, and develop a process that works best for you. To retain as much information as possible from each lesson, experiment with different learning strategies and stick to the one with which you resonate the most.\n\n## Wrapping Up\n\nLearning is a continuous journey, especially in the field of cybersecurity where new trends and threats emerge regularly. Embrace the grind, value the process of learning and remember, it's the repetition of efforts that lead to perfection. Each task you complete, every solution you find, and every mistake you learn from takes you one step closer to becoming a seasoned cybersecurity researcher.\n\nSo, let us put these words into action and continue dedicating time to exercises and persistent learning. The path forward is filled with endless knowledge and it's time we kept walking on it.\n\nStay safe, and keep researching!"
    }
}